#!/usr/bin/python3

import argparse
import sys

import matplotlib.gridspec as gridspec
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import numpy as np
import pandas as pd

import paths

parser = argparse.ArgumentParser(
    description="Plot genome wide insertion hotspots for all species/genomies generated by 08.summary_window_coverage.py")
parser.add_argument("--species", nargs=1, required=True,
    help="species for which hotspot plots are to be generated, a .tsv file")
parser.add_argument("--output-prefix", nargs=1, required=True,
    help="directory for outputs, windows are written to <output-prefix>/genomewide_insertion_hotspots.pdf")
parser.add_argument("--interactive", action='store_true',
    help="specify to view graphs interactively")
args = parser.parse_args()

outputs = paths.Outputs(args.output_prefix[0])
species =  pd.read_csv(args.species[0], delimiter='\t')

species =  pd.read_csv(args.species[0], delimiter='\t')
top_windows = pd.read_csv(outputs.top_windows_detail(), delimiter='\t')

num_species = species['species'].count()
current_species = 0
fig, axs = plt.subplots(num_species, 1, constrained_layout=True, figsize=(16,num_species*2))
plt.xlabel("Genomic Position (bp)")

def plot_species(ax, windows, abbrev):
    ax.xaxis.set_minor_locator(ticker.AutoMinorLocator(2))
    ax.yaxis.set_minor_locator(ticker.AutoMinorLocator(2))
    ax.grid(True, which='both')

    ax.plot(
        windows['window_order'],
        -np.log10(windows['pvalue']),
        linewidth='0.75',
        color='black',
        )
    hotspots = windows.loc[windows['signif'] & windows['top_window']]
    ax.scatter(
        hotspots['window_order'],
        -np.log10(hotspots['pvalue']),
        s=4,
        color='red',
        )
    ax.set_ylabel("-log10(P)")
    title = ax.twinx()
    title.set_ylabel(sp.species_abbrev, bbox={
        'linestyle':"-", 
        'linewidth': 1,
        'edgecolor':'black',
        'facecolor': 'lightgrey'
    })
    title.set_yticks([])
    pass

if num_species == 1:
    sp = species.iloc[0]
    per_species_windows = top_windows.loc[
        (top_windows['species'] == sp.species) &
        (top_windows['genome'] == sp.genome)
    ]
    plot_species(axs, per_species_windows, sp.species_abbrev)
else:
    for sp in species.sort_values(['species_abbrev']).itertuples():
        per_species_windows = top_windows.loc[
            (top_windows['species'] == sp.species) &
            (top_windows['genome'] == sp.genome)
        ]
        ax=axs[current_species]
        plot_species(ax, per_species_windows, sp.species_abbrev)
        current_species += 1

if args.interactive:
        plt.show()
else:
    plt.savefig(outputs.top_windows_plot())
