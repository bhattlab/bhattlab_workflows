#!/usr/bin/python3

import argparse
import sys

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

import paths

parser = argparse.ArgumentParser(
    description="Plot hotspots generated by 06.analyze_window_coverage.py")
parser.add_argument("--species", nargs=1, required=True,
    help="species for which hotspot plots are to be generated, a .tsv file")
parser.add_argument("--output-prefix", nargs=1, required=True,
    help="directory for outputs, windows are written to <output-prefix>/window_significance_results")
parser.add_argument("--interactive", action='store_true',
    help="specify to view graphs interactively")
args = parser.parse_args()

outputs = paths.Outputs(args.output_prefix[0])
species =  pd.read_csv(args.species[0], delimiter='\t')

def output_plots(outputs, species, genome):
    results = pd.read_csv(outputs.significance_results_filename(species, genome), delimiter='\t')
    hotspots = results.loc[results['signif']]
    plt.figure(figsize=(18, 4))
    plt.plot(
        results['window_order'],
        -np.log10(results['pvalue']),
        linewidth='0.75',
        color='black',
        )
    plt.scatter(
        hotspots['window_order'],
        -np.log10(hotspots['pvalue']),
        s=4,
        color='red',
        )
    plt.xlabel('window order')
    plt.ylabel('-log10(pvalue)')
    if args.interactive:
        plt.show()
    else:
        plt.savefig(outputs.significance_plots_filename(species, genome))

species.apply(lambda row:
    output_plots(
        outputs,
        row.species,
        row.genome,
    ), axis="columns")
